# -*- coding: utf-8 -*-
"""Bitcoin_Historical_Data1_(ML).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fifEWJrQKE2e8ENd8DJ9IzqkL3Wi8oJZ

# Predictive Analytics - BITCOIN Historical Datasets 2018-2025

---
By: Rahmi Amilia

### 1. Import Library
Import semua library yang dibutuhkan untuk proses data preparation, visualisasi, dan pemodelan.

## Import Library

### 2. Load Dataset
Memuat dataset historis harga Bitcoin dari file CSV. Dataset ini mencakup informasi harga, volume, dan tanggal dari tahun 2018 hingga 2024.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.svm import SVR
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import warnings
warnings.filterwarnings('ignore')

"""### 3. Data Overview
Menampilkan beberapa baris awal dari dataset untuk melihat struktur dan isi data.

## Load Dataset

### 4. Data Info dan Tipe Data
Memeriksa tipe data dari setiap kolom dan mengecek apakah terdapat missing values.
"""

df = pd.read_csv('/content/btc_1d_data_2018_to_2025.csv')

"""### 5. Statistical Summary
Menampilkan statistik deskriptif untuk memahami sebaran nilai dari setiap fitur numerik.
"""

df.head()

"""### 6. Cek Missing Values
Mengecek apakah ada nilai kosong (missing values) pada dataset. Jika ada, akan dilakukan penanganan lebih lanjut.
"""

df.tail()

"""### 7. Cek Duplikasi
Mengecek apakah ada data yang duplikat agar tidak mempengaruhi hasil model.
"""

df.describe()

"""### 8. Korelasi Antar Fitur
Menggunakan heatmap untuk melihat korelasi antara fitur-fitur numerik.

## EDA - Exploratory Data Analysis
"""

print(df.columns)

"""### 9. Visualisasi Harga Bitcoin
Memplot harga Bitcoin terhadap waktu untuk melihat tren umum dari tahun ke tahun.
"""

df['Open time'] = pd.to_datetime(df['Open time'])

"""Statistik deskriptif"""

print(df.describe())

"""### 10. Feature Engineering
Menghapus kolom yang tidak relevan dan membuat fitur-fitur baru jika diperlukan.
"""

print(df.isnull().sum())

"""### 11. Feature Selection
Menyeleksi fitur yang akan digunakan untuk pelatihan model. Beberapa kolom seperti 'Date' dihapus karena tidak relevan secara langsung untuk prediksi.
"""

plt.figure(figsize=(8,4))
sns.histplot(df['Close'], bins=50, kde=True)
plt.title('Distribusi Harga Penutupan Bitcoin')
plt.show()

"""### 12. Split Data
Membagi dataset menjadi data pelatihan dan data pengujian dengan rasio 80:20.
"""

plt.figure(figsize=(12,6))
plt.plot(df['Open time'], df['Close'])
plt.title('Harga Bitcoin dari Waktu ke Waktu')
plt.xlabel('Waktu')
plt.ylabel('Harga')
plt.show()

"""### 13. Model Development - Random Forest
Melatih model RandomForestRegressor. Model ini dipilih karena kemampuannya menangani data non-linear dan outlier.

**Parameter:** default (n_estimators=100 secara default)
"""

numeric_cols = df.select_dtypes(include=[np.number])

plt.figure(figsize=(10,8))
sns.heatmap(numeric_cols.corr(), annot=True, cmap='coolwarm')
plt.title('Heatmap Korelasi Fitur')
plt.show()

"""## Data Preparation

### 14. Evaluasi Model
Menghitung metrik evaluasi seperti MAE, MSE, dan R² Score untuk menilai performa model.
"""

df = df[['Open', 'High', 'Low', 'Volume', 'Close']]

print(df.isnull().sum())

"""### 15. Interpretasi Evaluasi
Dari hasil evaluasi, model memiliki nilai R² sebesar mendekati 1 yang berarti performa sangat baik dalam menjelaskan variasi data. MAE dan MSE menunjukkan rata-rata kesalahan prediksi cukup kecil.
"""

X = df.drop('Close', axis=1)
y = df['Close']

scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

"""### 16. Kesimpulan & Dampak Bisnis
Model yang dibangun berhasil mencapai tujuan awal yaitu memprediksi harga Bitcoin secara akurat. Hal ini dapat membantu investor atau analis dalam pengambilan keputusan berdasarkan prediksi harga di masa mendatang.
"""

X_train, X_test, y_train, y_test = train_test_split(
    X_scaled, y, test_size=0.2, random_state=42, shuffle=False
)

print(f"Jumlah data train: {len(X_train)}")
print(f"Jumlah data test: {len(X_test)}")

"""## Modeling"""

rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
rf_pred = rf_model.predict(X_test)

xgb_model = XGBRegressor(n_estimators=100, random_state=42)
xgb_model.fit(X_train, y_train)
xgb_pred = xgb_model.predict(X_test)

svr_model = SVR(kernel='rbf', C=100)
svr_model.fit(X_train, y_train)
svr_pred = svr_model.predict(X_test)

"""## Evaluation

"""

def evaluate_model(y_true, y_pred, model_name):
    mae = mean_absolute_error(y_true, y_pred)
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    r2 = r2_score(y_true, y_pred)

    print(f" {model_name} Performance:")
    print(f"MAE: {mae:.2f}")
    print(f"RMSE: {rmse:.2f}")
    print(f"R2 Score: {r2:.2f}")
    print("-"*30)

evaluate_model(y_test, rf_pred, "Random Forest")
evaluate_model(y_test, xgb_pred, "XGBoost")
evaluate_model(y_test, svr_pred, "SVR")

"""## Visualization"""

plt.figure(figsize=(15,6))
plt.plot(y_test.values, label='Actual', color='black')
plt.plot(rf_pred, label='Random Forest Prediction')
plt.plot(xgb_pred, label='XGBoost Prediction')
plt.plot(svr_pred, label='SVR Prediction')
plt.legend()
plt.title('Perbandingan Harga Asli vs Prediksi')
plt.xlabel('Sample')
plt.ylabel('Harga Bitcoin')
plt.show()

sns.pairplot(df[['Open', 'High', 'Low', 'Close', 'Volume']])
plt.suptitle('Pairplot Antar Fitur Harga Bitcoin', y=1.02)
plt.show()

